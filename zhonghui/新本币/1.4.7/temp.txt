《如何完成一个版本的集中测试技术验证》
在开始之前，我先简单介绍一下149版本的集中技术测试做了哪些事情。
……

介绍完这些，相信大家都能对集中技术测试有一个大概的印象了，那下面我就开始正文，说下我们是怎么进行这次集中技术验证的。
其实集中技术测试和做一个小项目是类似的，我大致把他和项目开发一样他分为需求-设计-开发-测试-上线这5个流程。
首先说说需求分析：为了不在集中测试时迷失方向，需求是个很重要的步骤。每个版本集成的小项目都不一样，所以每次技术验证的内容肯定也不同。我们在开始前首先要收集版本相关的小项目信息，寻找小项目中或其他上线内容中需要测试的地方，整理出“测试范围列表”。
设计：可能有人觉得一个集中测试怎么还需要做设计？是不是有些多余，但我觉得这是非常有必要的一个环节。在这个环节中，我们要针对需要测试的内容，进行对应的场景设计，规划对应的实现方案，以及预定对应的结果目标。形成详细的记录文档，来保证我们后续的工作能有条不紊的进行。
开发：这个阶段既简单也复杂，简单的来说这个阶段的目的很明确，就是要基于设计开发出相应的测试工具和脚本。但这件事也可以很复杂，因为开发出的东西决定了这次集中技术测试的上限。
我先带大家看一下149版本开发了哪些东西。
……

这些是我们当时在147时开发出来的一些东西，在147暂停之后，我尝试的去整理一下这些内容，但发现这些东西太零碎了，就算是使用目录归纳，写说明书也很难让后继者方便的使用。所以当时就趁147~149的间隙，做了系统的规划。我这边把模拟消息，成交回放等等功能整理出了一个swallow包，又建了eagle和eagleadapter2个包来实现监控，观察接口、内存、定时任务等方面的情况。同时搭建了一个监控平台，能更直观的观察系统情况，而不用每日都过日志查询。
可以给大家大致看一下这个可视化平台……
最终的目的是 1.通过工程的形式，迭代的开发测试功能，使集中测试能有延续性。2.搭建平台，通过可视化的界面去观察测试结果,之后不断丰富平台的dashboard，使监控的内容更全面。
如果做好这些，就能为之后版本的集中测试建立一定的基础。比如这次149版本达到了60分，而我基础建设了40分，后续版本就能在40分的基础上继续前进。在150版本……
等整个监控平台孵化成熟之后，甚至是可以直接部署生产环境帮我们了解系统实时运行情况。
更进一步，想要完整的监控所有系统，势必需要统一开发规范。我们在代码规范上做的并不好，没有形成公司统一的开发风格。开发风格这东西，如果形成的话，后续跟风是比较容易的，但中途改变很困难。因为大家都会觉得没必要改变。借此机会我们能来树立公司统一的代码开发风格，增强团队的内在素质，提高团队的作战能力。
举个例子……

最后说说测试和上线这2个步骤，这里所谓的上线就是指使用开发好的测试工具去对系统进行测试，之所以和测试放在一起说，是因为我们在测试系统的时候其实也是在验证工具本身。对于测试工具会有更高的质量要求。拿计量检测来说，工具的精度一定是大于检测对象的精度标准的，没人会相信一个bug百出的测试工具的测试结果的。所以在反馈bug之前一定需要测好工具自生。每个版本测试内容不同，我也不过多介绍149的内容了。这里我就总结2个经验：1.一定要做好详细的计划，并与对应开发和守门员确认计划的准确性。2.要协调好各方资源，保证计划能准确执行。

其实有很多人都看不太上集中技术测试的，但我对它的期望还是很高的，
做好集中技术测试，监控系统状况，发现问题保证系统质量，提高团队的外在功力；形成开发风格，培养员工开发习惯，加快开发速度和质量，提高团队内功。内外兼修，天下无敌。
当然，要达到这种程度还有比较长的路要走，我只是开始了一小步，燕子和老鹰还只是2只雏鸟，它们的健康成长或者加入其它成员，就都要靠大家了。

应用系统低耦合